#include <iostream>
#include <fstream>
#include <cmath>

using namespace std;




void function(long double* k, long double* y, long double r, long double s, double const mu);

int main(){
  double const mu = 0.012277471;
  double dx = 0.0001;
  double T = 0;
  long double const Tend = 17.065216560157;    
  long double const X =  T;
  double N = X/dx;
 
  
  long double y4[4], y[4], k1[4], k2[4], k3[4], k4[4], k5[4], k6[4], k7[4], ytemp[4], r, s, max1, max2, Max, norm[4];
  
  ofstream out("arenstorf.txt");

  y[0] = 0.994;
  y[1] = 0;
  y[2] = 0;
  y[3] = -2.00158510637908;
  
  int i = 0;
  const double tol = 0.00001;
 
 
  while (T < Tend ){
  
  T += dx;   
  
  
  function(k1,y,r,s,mu);
  ytemp[0] = y[0] + dx * 0.2 * k1[0];
  ytemp[1] = y[1] + dx * 0.2 * k1[1];
  ytemp[2] = y[2] + dx * 0.2 * k1[2];
  ytemp[3] = y[3] + dx * 0.2 * k1[3];
  
  function(k2,ytemp,r,s,mu);
  ytemp[0] = y[0] + (3.0 / 40.0) * dx * k1[0] + (9.0 / 40.0) * dx * k2[0];
  ytemp[1] = y[1] + (3.0 / 40.0) * dx * k1[1] + (9.0 / 40.0) * dx * k2[1];
  ytemp[2] = y[2] + (3.0 / 40.0) * dx * k1[2] + (9.0 / 40.0) * dx * k2[2];
  ytemp[3] = y[3] + (3.0 / 40.0) * dx * k1[3] + (9.0 / 40.0) * dx * k2[3];
  
  function(k3,ytemp,r,s,mu);
  ytemp[0] = y[0] + (44.0 / 45.0) * dx * k1[0] - (56.0 / 15.0) * dx * k2[0] + (32.0 / 9.0) * dx * k3[0];
  ytemp[1] = y[1] + (44.0 / 45.0) * dx * k1[1] - (56.0 / 15.0) * dx * k2[1] + (32.0 / 9.0) * dx * k3[1];
  ytemp[2] = y[2] + (44.0 / 45.0) * dx * k1[2] - (56.0 / 15.0) * dx * k2[2] + (32.0 / 9.0) * dx * k3[2];
  ytemp[3] = y[3] + (44.0 / 45.0) * dx * k1[3] - (56.0 / 15.0) * dx * k2[3] + (32.0 / 9.0) * dx * k3[3];
  
  function(k4,ytemp,r,s,mu);
  ytemp[0] = y[0] + (19372.0 / 6561.0) * dx * k1[0] - (25360.0 / 2187.0) * dx * k2[0] + (64448.0 / 6561.0) * dx * k3[0] - (212.0 / 729.0) * dx * k4[0];
  ytemp[1] = y[1] + (19372.0 / 6561.0) * dx * k1[1] - (25360.0 / 2187.0) * dx * k2[1] + (64448.0 / 6561.0) * dx * k3[1] - (212.0 / 729.0) * dx * k4[1];
  ytemp[2] = y[2] + (19372.0 / 6561.0) * dx * k1[2] - (25360.0 / 2187.0) * dx * k2[2] + (64448.0 / 6561.0) * dx * k3[2] - (212.0 / 729.0) * dx * k4[2];
  ytemp[3] = y[3] + (19372.0 / 6561.0) * dx * k1[3] - (25360.0 / 2187.0) * dx * k2[3] + (64448.0 / 6561.0) * dx * k3[3] - (212.0 / 729.0) * dx * k4[3];
  
  function(k5,ytemp,r,s,mu);
  ytemp[0] = y[0] + (9017.0 / 3168.0) * dx * k1[0] - (355.0 / 33.0) * dx * k2[0] + (46732.0 / 5247.0) * dx * k3[0] + (49.0 / 167.0) * dx * k4[0] - (5103.0 / 18656.0) * dx * k5[0];
  ytemp[1] = y[1] + (9017.0 / 3168.0) * dx * k1[1] - (355.0 / 33.0) * dx * k2[1] + (46732.0 / 5247.0) * dx * k3[1] + (49.0 / 167.0) * dx * k4[1] - (5103.0 / 18656.0) * dx * k5[1];
  ytemp[2] = y[2] + (9017.0 / 3168.0) * dx * k1[2] - (355.0 / 33.0) * dx * k2[2] + (46732.0 / 5247.0) * dx * k3[2] + (49.0 / 167.0) * dx * k4[2] - (5103.0 / 18656.0) * dx * k5[2];
  ytemp[3] = y[3] + (9017.0 / 3168.0) * dx * k1[3] - (355.0 / 33.0) * dx * k2[3] + (46732.0 / 5247.0) * dx * k3[3] + (49.0 / 167.0) * dx * k4[3] - (5103.0 / 18656.0) * dx * k5[3];
  
  function(k6,ytemp,r,s,mu);
  ytemp[0] = y[0] + (35.0 / 384.0) * dx * k1[0] + 0 * dx * k2[0] + (500.0 / 1113.0) * dx * k3[0] + (125.0 / 192.0) * dx * k4[0] - (2187.0 / 6784.0) * dx * k5[0] + (11.0 / 84.0) * dx * k6[0];
  ytemp[1] = y[1] + (35.0 / 384.0) * dx * k1[1] + 0 * dx * k2[1] + (500.0 / 1113.0) * dx * k3[1] + (125.0 / 192.0) * dx * k4[1] - (2187.0 / 6784.0) * dx * k5[1] + (11.0 / 84.0) * dx * k6[1];
  ytemp[2] = y[2] + (35.0 / 384.0) * dx * k1[2] + 0 * dx * k2[2] + (500.0 / 1113.0) * dx * k3[2] + (125.0 / 192.0) * dx * k4[2] - (2187.0 / 6784.0) * dx * k5[2] + (11.0 / 84.0) * dx * k6[2];
  ytemp[3] = y[3] + (35.0 / 384.0) * dx * k1[3] + 0 * dx * k2[3] + (500.0 / 1113.0) * dx * k3[3] + (125.0 / 192.0) * dx * k4[3] - (2187.0 / 6784.0) * dx * k5[3] + (11.0 / 84.0) * dx * k6[3];
  
  function(k7,ytemp,r,s,mu);
  
  y[0] = y[0] + (35.0 / 384.0) * dx * k1[0] + 0 * dx * k2[0] + (500.0 / 1113.0) * dx * k3[0] + (125.0 / 192.0) * dx * k4[0] - (2187.0 / 6784.0) * dx * k5[0] + (11.0 / 84.0) * dx * k6[0] + 0 * dx * k7[0];
  y[1] = y[1] + (35.0 / 384.0) * dx * k1[1] + 0 * dx * k2[1] + (500.0 / 1113.0) * dx * k3[1] + (125.0 / 192.0) * dx * k4[1] - (2187.0 / 6784.0) * dx * k5[1] + (11.0 / 84.0) * dx * k6[1] + 0 * dx * k7[1];
  y[2] = y[2] + (35.0 / 384.0) * dx * k1[2] + 0 * dx * k2[2] + (500.0 / 1113.0) * dx * k3[2] + (125.0 / 192.0) * dx * k4[2] - (2187.0 / 6784.0) * dx * k5[2] + (11.0 / 84.0) * dx * k6[2] + 0 * dx * k7[2];
  y[3] = y[3] + (35.0 / 384.0) * dx * k1[3] + 0 * dx * k2[3] + (500.0 / 1113.0) * dx * k3[3] + (125.0 / 192.0) * dx * k4[3] - (2187.0 / 6784.0) * dx * k5[3] + (11.0 / 84.0) * dx * k6[3] + 0 * dx * k7[3];
  
  y4[0] = y[0] + (5179.0 / 57600.0) * dx * k1[0] + 0 * dx * k2[0] + (7571.0 / 16695.0) * dx * k3[0] + (393.0 / 640.0) * dx * k4[0] - (92097.0 / 339200.0) * dx * k5[0] + (187.0 / 2100.0) * dx * k6[0] + (1.0 / 40.0) * dx * k7[0];
  y4[1] = y[1] + (5179.0 / 57600.0) * dx * k1[1] + 0 * dx * k2[1] + (7571.0 / 16695.0) * dx * k3[1] + (393.0 / 640.0) * dx * k4[1] - (92097.0 / 339200.0) * dx * k5[1] + (187.0 / 2100.0) * dx * k6[1] + (1.0 / 40.0) * dx * k7[1];
  y4[2] = y[2] + (5179.0 / 57600.0) * dx * k1[2] + 0 * dx * k2[2] + (7571.0 / 16695.0) * dx * k3[2] + (393.0 / 640.0) * dx * k4[2] - (92097.0 / 339200.0) * dx * k5[2] + (187.0 / 2100.0) * dx * k6[2] + (1.0 / 40.0) * dx * k7[2];
  y4[3] = y[3] + (5179.0 / 57600.0) * dx * k1[3] + 0 * dx * k2[3] + (7571.0 / 16695.0) * dx * k3[3] + (393.0 / 640.0) * dx * k4[3] - (92097.0 / 339200.0) * dx * k5[3] + (187.0 / 2100.0) * dx * k6[3] + (1.0 / 40.0) * dx * k7[3];
  
  
  
  norm[0] = abs (y4[0]-y[0]);
  norm[1] = abs (y4[1]-y[1]);
  norm[2] = abs (y4[2]-y[2]);
  norm[3] = abs (y4[3]-y[3]);
  
  max1 = max(norm[0],norm[1]);
  max2 = max(norm[2],norm[3]);
  Max = max(max1,max2);
  

  

     if (tol > Max) 
      dx = 0.5 * dx * pow((Max/tol), (1.0 / 5.0)); 
     
  out << T  << "\t" << Max << "\t" << y[0] << "\t" << y[2] << endl;
  
    
  }


  out.close();
  return 0;
}

void function(long double* k, long double* y, long double r, long double s, double const mu){
  
  r = sqrt((y[2] + mu) * (y[2] + mu) + y[0] * y[0]);
  s = sqrt((y[2] - 1 + mu) * (y[2] - 1 + mu) + y[0] * y[0]);
  k[0] = y[1] ;
  k[1] = y[0] + 2.* y[3] - ((1 - mu) * (y[0] + mu))/(r * r * r) - (mu * (y[0] - 1 + mu))/(s * s * s); 
  k[2] = y[3];
  k[3] = y[2] - 2. * y[1] - ((1 - mu) * y[2])/(r * r * r) - (mu * y[2])/(s * s * s); 



  
}